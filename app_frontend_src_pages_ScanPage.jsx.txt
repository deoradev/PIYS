import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const ScanPage = ({ user }) => {
  const [scannedCode, setScannedCode] = useState('');
  const [scanResult, setScanResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => ({
    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
  });

  const handleScan = async (e) => {
    e.preventDefault();
    if (!scannedCode.trim()) return;

    try {
      setLoading(true);
      setError('');
      
      // Extract unique code from QR data
      // QR format: "PIYS:UNIQUECODE:SPACEID:USERID"
      const parts = scannedCode.split(':');
      const uniqueCode = parts.length >= 2 ? parts[1] : scannedCode;
      
      const response = await axios.post(`${API_URL}/scan/${uniqueCode}`, {}, getAuthHeaders());
      setScanResult(response.data);
    } catch (error) {
      setError(error.response?.data?.detail || 'Invalid QR code or scanning failed');
      setScanResult(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = async (spaceId, ownerId, message) => {
    try {
      await axios.post(`${API_URL}/messages`, {
        recipient_id: ownerId,
        space_id: spaceId,
        content: message
      }, getAuthHeaders());
      alert('Message sent successfully!');
    } catch (error) {
      alert('Failed to send message');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-4">
              <Link to="/dashboard" className="text-blue-600 hover:text-blue-700">
                ← Back to Dashboard
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                {user.name}
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Content */}
      <main className="container mx-auto px-6 py-8">
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Scan QR Code</h1>
            <p className="text-gray-600">
              Scan the QR code from a parking space to view details and contact the owner.
            </p>
          </div>

          {/* QR Scanner Form */}
          <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
            <form onSubmit={handleScan} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  QR Code Data
                </label>
                <textarea
                  value={scannedCode}
                  onChange={(e) => setScannedCode(e.target.value)}
                  placeholder="Paste QR code data here or use camera scanner"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  rows="4"
                  required
                />
              </div>
              
              <button
                type="submit"
                disabled={loading}
                className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium disabled:opacity-50"
              >
                {loading ? 'Scanning...' : 'Scan QR Code'}
              </button>
            </form>

            {/* Camera Scanner Placeholder */}
            <div className="mt-6 p-6 border-2 border-dashed border-gray-300 rounded-lg text-center">
              <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Camera Scanner</h3>
              <p className="text-gray-500 mb-4">
                Use your device camera to scan QR codes directly
              </p>
              <button className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-medium">
                Open Camera Scanner
              </button>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex">
                <svg className="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
                <p className="text-red-700">{error}</p>
              </div>
            </div>
          )}

          {/* Scan Result */}
          {scanResult && (
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-4">Parking Space Details</h2>
              
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold text-gray-700">Title</h3>
                  <p className="text-gray-900">{scanResult.space.title}</p>
                </div>
                
                <div>
                  <h3 className="font-semibold text-gray-700">Address</h3>
                  <p className="text-gray-900">{scanResult.space.address}</p>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-semibold text-gray-700">Hourly Rate</h3>
                    <p className="text-green-600 font-bold">${scanResult.space.hourly_rate}/hour</p>
                  </div>
                  
                  {scanResult.space.daily_rate && (
                    <div>
                      <h3 className="font-semibold text-gray-700">Daily Rate</h3>
                      <p className="text-green-600 font-bold">${scanResult.space.daily_rate}/day</p>
                    </div>
                  )}
                </div>
                
                <div>
                  <h3 className="font-semibold text-gray-700">Availability</h3>
                  <span className={`px-2 py-1 rounded-full text-sm font-medium ${
                    scanResult.space.available 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {scanResult.space.available ? 'Available' : 'Occupied'}
                  </span>
                </div>

                {/* Quick Contact */}
                <div className="border-t pt-4">
                  <h3 className="font-semibold text-gray-700 mb-3">Contact Owner</h3>
                  <div className="flex gap-2">
                    <button
                      onClick={() => {
                        const message = `Hi! I'm interested in parking at your space: ${scanResult.space.title}`;
                        handleSendMessage(scanResult.space.id, scanResult.space.user_id, message);
                      }}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
                    >
                      Send Quick Message
                    </button>
                    <button
                      onClick={() => {
                        const message = `Hi! I'd like to book your parking space: ${scanResult.space.title}. When is it available?`;
                        handleSendMessage(scanResult.space.id, scanResult.space.user_id, message);
                      }}
                      className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium"
                    >
                      Request Booking
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Instructions */}
          <div className="mt-8 bg-blue-50 rounded-xl p-6">
            <h3 className="text-lg font-semibold text-blue-900 mb-2">How to Scan</h3>
            <ul className="text-blue-800 space-y-1">
              <li>• Point your camera at the QR code on the parking space</li>
              <li>• Or paste the QR code data in the text area above</li>
              <li>• View space details and contact the owner directly</li>
              <li>• Send messages to arrange parking</li>
            </ul>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ScanPage;
